#!/usr/bin/env python


import os
import click
import csv

from dotenv import load_dotenv, find_dotenv
from polyglot.text import Text
from geopy.geocoders import Mapzen


@click.group()
def geotext():

    """
    Load configuration variables.
    """

    load_dotenv(find_dotenv())


@geotext.command()
@click.argument('in_file', type=click.File('r'))
@click.argument('out_file', type=click.File('w'))
def extract_toponyms(in_file, out_file):

    """
    Extract toponyms from a text file.
    """

    text = Text(in_file.read())

    # Extract location entities.
    entities = [e for e in text.entities if e.tag == 'I-LOC']

    cols = ['toponym', 'start']
    writer = csv.DictWriter(out_file, cols)
    writer.writeheader()

    for e in entities:

        # Get the raw string of the entity.
        toponym = ' '.join(text.words[e.start:e.end])

        writer.writerow(dict(
            toponym=toponym,
            start=e.start,
        ))


@geotext.command()
@click.argument('in_file', type=click.File('r'))
@click.argument('out_file', type=click.File('w'))
@click.option('--country', type=str)
def geocode(in_file, out_file, country):

    """
    Geocode toponyms in a CSV file.
    """

    reader = csv.DictReader(in_file)

    geocoder = Mapzen(
        api_key=os.environ.get('MAPZEN_KEY'),
        country_bias=country,
        timeout=10,
    )

    # Add lon/lat fields to the CSV.
    cols = reader.fieldnames + ['latitude', 'longitude']

    writer = csv.DictWriter(out_file, cols)
    writer.writeheader()

    for row in reader:

        try:

            # Query the Mapzen API.
            loc = geocoder.geocode(row['toponym'])

            # Merge in the coordinates.
            row.update(dict(
                latitude=loc.latitude,
                longitude=loc.longitude,
            ))

            # Write the result to the CSV.
            writer.writerow(row)

            # Log progress.
            print(row['toponym'], loc.point)

        except Exception as e:
            print(e)


@geotext.command()
def csv_to_geojson():

    """
    Convert a geocoded CSV to GeoJSON.
    """

    print('geojson')


if __name__ == '__main__':
    geotext()
