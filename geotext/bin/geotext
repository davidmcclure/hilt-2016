#!/usr/bin/env python


import os
import click
import csv

from dotenv import load_dotenv, find_dotenv
from polyglot.text import Text
from geopy.geocoders import Mapzen


@click.group()
def geotext():

    """
    Load configuration variables.
    """

    load_dotenv(find_dotenv())


@geotext.command()
@click.argument('in_file', type=click.File('r'))
@click.argument('out_file', type=click.File('w'))
def extract_toponyms(in_file, out_file):

    """
    Extract toponyms from a text file.
    """

    text = Text(in_file.read())

    entities = [e for e in text.entities if e.tag == 'I-LOC']

    cols = ['toponym', 'start']
    writer = csv.DictWriter(out_file, cols)
    writer.writeheader()

    for e in entities:

        # Get the raw string of the entity.
        toponym = ' '.join(text.words[e.start:e.end])

        writer.writerow(dict(
            toponym=toponym,
            start=e.start,
        ))


@geotext.command()
@click.argument('in_file', type=click.File('r'))
@click.argument('out_file', type=click.File('w'))
def geocode(in_file, out_file):

    """
    Geocode toponyms in a CSV file.
    """

    reader = csv.DictReader(in_file)

    # TODO|dev
    geocoder = Mapzen(api_key=os.environ.get('MAPZEN_KEY'))

    for row in reader:

        loc = geocoder.geocode(row['toponym'])

        print(row['toponym'], loc.point)


@geotext.command()
def csv_to_geojson():

    """
    Convert a geocoded CSV to GeoJSON.
    """

    print('geojson')


if __name__ == '__main__':
    geotext()
